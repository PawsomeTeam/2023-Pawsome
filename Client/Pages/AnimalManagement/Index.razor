@page "/manage/animals"
@inject NavigationManager navigationManager
@inject IAnimalService animalService


<MudText Typo="Typo.h3" Class="mb-8" Align="Align.Center">Manage Animals</MudText>

<MudToolBar class="pr-0 pl-0">
    <MudText Typo="Typo.h6">All Animals</MudText>
    <MudSpacer />
    <div class="mx-5">
        <MudTextField @bind-Value="searchInput" Placeholder="Search" Class="mt-0"
                      Adornment="Adornment.Start" AdornmentColor="Color.Primary"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"
                      Variant="Variant.Outlined" Width="100px" Margin="Margin.Dense">
        </MudTextField>
    </div>
    <MudButton Link="/manage/animals/new" Color="Color.Primary" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Add">Add New</MudButton>
</MudToolBar>

<MudTable Items="@_animals" Hover="true" SortLabel="Sort By" Filter="new Func<AnimalDto, bool>(FilterFunc1)" Loading="@_loading" LoadingProgressColor="Color.Primary">
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel Enabled="true" SortBy="new Func<AnimalDto, object>(x => x.Id)">Id</MudTableSortLabel>
        </MudTh>
        <MudTh>Thumbnail</MudTh>
        <MudTh>
            <MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<AnimalDto, object>(x => (x.Name != null ? x.Name : ' '))">Name</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<AnimalDto, object>(x => x.Age)">Age</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<AnimalDto, object>(x => x.Price)">Price</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<AnimalDto, object>(x => x.Type)">Type</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<AnimalDto, object>(x => x.Reservation_Date)">Reserved</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<AnimalDto, object>(x => x.Date_adopted)">Date Adopted</MudTableSortLabel>
        </MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        @{
            string DisplayUrl = $"/animals/{context.Id}";
        }
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Image">
            <MudLink Href="@DisplayUrl">   
                <MudImage ObjectFit="ObjectFit.Cover" Height="80" Width="80" Src="@context.Main_Image_Url" Alt="@context.Name" Elevation="25" Class="rounded-lg" />
            </MudLink>
        </MudTd>
        <MudTd DataLabel="Name">
            <MudLink Href="@DisplayUrl">   
                <MudText Typo="Typo.subtitle1">@context.Name</MudText>
            </MudLink>
        </MudTd>
        <MudTd DataLabel="Age">@context.Age</MudTd>
        <MudTd DataLabel="Price">@context.Price.ToString("C")</MudTd>
        <MudTd DataLabel="Type">@context.Type</MudTd>
        <MudTd DataLabel="Reserved">@((context.Reservation_Date != null) ? context.Reservation_Date.Value.ToString("dd/MM/yyyy") : "-")</MudTd>
            <MudTd DataLabel="Date Adopted">@((context.Date_adopted != null) ? context.Date_adopted.Value.ToString("dd/MM/yyyy") : "-")</MudTd>
            <MudTd DataLabel="Actions">
                @{
                    var editUrl = $"manage/animals/update/{context.Id}";
                    var deleteUrl = $"manage/animals/delete/{context.Id}";
                }     
                <MudIconButton Link="@editUrl" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" Size="Size.Small" />
                <MudIconButton OnClick="@(() => ShowConfirmDeleteDialog(context))" Color="Color.Error" Icon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Size="Size.Small" />
            </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 50, 100 }" />
    </PagerContent>
</MudTable>


<MudDialog @bind-IsVisible="_confirmDeleteDialogVisible">
    <DialogContent>
        Are you sure you want to delete this animal?
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" Variant="Variant.Outlined" OnClick="@(() => _confirmDeleteDialogVisible = false)">Cancel</MudButton>
        <MudButton Color="Color.Error" Variant="Variant.Outlined" OnClick="@(() => DeleteAnimalConfirmed(_animalToDelete))">Delete</MudButton>
    </DialogActions>
</MudDialog>


@code {
    private bool _loading = true;
    private List<AnimalDto> _animals = new();



    //description length
    private int maxLen = 30;

    //searching
    private string searchInput = "";
    private bool FilterFunc1(AnimalDto element) => FilterFunc(element, searchInput);

    private bool FilterFunc(AnimalDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if ($"{element.Name} {element.Age} {element.Description} {element.Type} {element.Price}".Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    // Delete Confirmation
    private bool _confirmDeleteDialogVisible = false;
    private AnimalDto _animalToDelete;

    private async Task DeleteAnimal(AnimalDto animal)
    {
        _confirmDeleteDialogVisible = false;
        _loading = true;
        await animalService.DeleteAnimal(animal.Id);
        _animals.Remove(animal);
        _loading = false;
    }

    private async Task DeleteAnimalConfirmed(AnimalDto animal)
    {
        await DeleteAnimal(animal);
    }

    private void ShowConfirmDeleteDialog(AnimalDto animal)
    {
        _animalToDelete = animal;
        _confirmDeleteDialogVisible = true;
    }

    protected override async Task OnInitializedAsync()
    {
        _animals = await animalService.GetAll();
        _loading = false;
    }

}