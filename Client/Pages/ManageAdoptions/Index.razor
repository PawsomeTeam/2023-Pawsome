@page "/manage/adoptions"
@inject IAdoptionService _adoptionService
@inject IAnimalService _animalService

@if(Adoptions == null && error == null)
{
       <MudText Typo="Typo.h6" Class="mb-8" Align="Align.Center">
            <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
             Loading ...
        </MudText>
}
else if(error != null)
{
    <MudAlert Severity="Severity.Error" Class="mb-8" Align="Align.Center">
        <MudText Typo="Typo.h6" Class="mb-8" Align="Align.Center">
            @error
        </MudText>
    </MudAlert>
}
else
{

    <MudToolBar class="pr-0 pl-0">
        <MudText Typo="Typo.h6">All Adoptions</MudText>
        <MudSpacer />
        <div class="mx-5">
            <MudTextField @bind-Value="searchInput" Placeholder="Search"  Class="mt-0" 
        Adornment="Adornment.Start" AdornmentColor="Color.Primary"
        AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"
        Variant="Variant.Outlined" Width="100px" Margin="Margin.Dense" ></MudTextField>
        </div>
    </MudToolBar>

<MudTable Items="@Adoptions" Hover="true" SortLabel="Sort By" Filter="new Func<AdoptionDetailsForAdminDto,bool>(FilterFunc1)" Loading="@loading" LoadingProgressColor="Color.Primary">
    <HeaderContent>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<AdoptionDetailsForAdminDto, object>(x=>x.Id)">Id</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<AdoptionDetailsForAdminDto, object>(x=>x.AdopteeName)">Adoptee</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<AdoptionDetailsForAdminDto, object>(x=>x.AdopterFullName!)">Adopter</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<AdoptionDetailsForAdminDto, object>(x=>x.CreatedAt)">Submission</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<AdoptionDetailsForAdminDto, object>(x=> (x.NoteForAdministration !=null ? x.NoteForAdministration : x.NoteForAdopter))">Notes</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<AdoptionDetailsForAdminDto, object>(x=>x.State)">State</MudTableSortLabel></MudTh>
        <MudTh>Handle</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Adoptee">
           
            <MudImage ObjectFit="ObjectFit.Cover" Height="50" Width="50" Src="@context.AdoppteeMainImageURL" Alt="@context.AdopteeName" Elevation="25" Class="rounded-lg" />
            <MudText Typo="Typo.subtitle2">@context.AdopteeName</MudText>
            <MudText Typo="Typo.body1"><i>@context.AdopteeType</i></MudText>
        </MudTd>
        <MudTd DataLabel="Adopter">
            <MudText Typo="Typo.subtitle2">@context.AdopterFullName</MudText>
            <MudText Typo="Typo.subtitle2">@context.AdopterEmail</MudText>
        </MudTd>
        <MudTd DataLabel="Submission">
            <MudText Typo="Typo.body1"  Class="d-flex gap-2 align-center"><MudIcon Icon="@Icons.Material.Filled.CalendarMonth"/>@context.CreatedAt.ToString("yyyy-MM-dd")</MudText>
            <MudText Typo="Typo.body1" Class="d-flex gap-2 align-center"><MudIcon Icon="@Icons.Material.Filled.AccessTime"/>@context.CreatedAt.ToString("hh:mm:ss")</MudText>
        </MudTd>
        <MudTd DataLabel="Notes">
            @if(context.NoteForAdministration != null){
                
            	<MudTooltip>
                    <ChildContent>
                       <MudText Typo="Typo.body1"  Class="d-flex gap-2 align-center"> <MudIcon Icon="@Icons.Material.Filled.StickyNote2"/>For Administration</MudText>
                    </ChildContent>
                     <TooltipContent>
                        <MudContainer MaxWidth="MaxWidth.ExtraSmall">
                            <MudText Typo="Typo.body1"  Class="d-flex gap-2 align-center">@context.NoteForAdministration</MudText>
                        </MudContainer>
                     </TooltipContent>
                </MudTooltip><br>
            }

            @if(context.NoteForAdopter != null){
            	<MudTooltip>
                    <ChildContent>
                       <MudText Typo="Typo.body1"  Class="d-flex gap-2 align-center"> <MudIcon Icon="@Icons.Material.Filled.StickyNote2"/>For Adopter</MudText>
                    </ChildContent>
                     <TooltipContent>
                        <MudContainer MaxWidth="MaxWidth.ExtraSmall">
                            <MudText Typo="Typo.body1"  Class="d-flex gap-2 align-center">@context.NoteForAdopter</MudText>
                        </MudContainer>
                     </TooltipContent>
                </MudTooltip>
            }
        </MudTd>
        <MudTd DataLabel="State">
            @if(context.State != null){
                if(context.State == "Completed"){
                 <MudText Typo="Typo.body1"  Class="d-flex gap-2 align-center" Color="Color.Success"><MudIcon Icon="@Icons.Material.Filled.Check"/>@context.State</MudText>
                } else if(context.State == "Canceled"){
                 <MudText Typo="Typo.body1" Class="d-flex gap-2 align-center" Color="Color.Error"><MudIcon Icon="@Icons.Material.Filled.Cancel"/>@context.State</MudText>
                } else {
                 <MudText Typo="Typo.body1" Class="d-flex gap-2 align-center" Color="Color.Warning"><MudIcon Icon="@Icons.Material.Filled.Pending"/>@context.State</MudText>
                }
                <MudText Typo="Typo.body1" Class="d-flex gap-2 align-center mb-2"><MudIcon Icon="@Icons.Material.Filled.CalendarMonth"/>@context.StateDate?.ToString("yyyy-MM-dd")</MudText>      
            } else {
                <MudText Typo="Typo.body1"  Class="d-flex gap-2 align-center"><MudIcon Icon="@Icons.Material.Filled.HourglassEmpty"/>Unhandled</MudText>             
            }
             
        </MudTd>
         <MudTd DataLabel="Handle">
             @{var detailsUrl = $"/manage/adoptions/{context.Id}";}
            @if(context.State != null){
                @if(context.State == "Canceled" || context.State == "Completed"){
                     var deleteUrl = $"/manage/adoptions/delete/{context.Id}";
                    <MudButton OnClick="@(() => ShowConfirmDeleteDialog(context))" Variant="Variant.Filled" Color="Color.Error" Class="me-2">Delete</MudButton>
                }
                    <MudButton Variant="Variant.Filled" Link="@detailsUrl" Color="Color.Primary">Uptade</MudButton>           
            } else {
                <MudButton Variant="Variant.Filled" Link="@detailsUrl" Color="Color.Primary">Start Processing</MudButton>              
            }
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[]{10, 50, 100}" />
    </PagerContent>
</MudTable>

        <MudDialog @bind-IsVisible="_confirmDeleteDialogVisible">
                    <DialogContent>
                        Are you sure you want to delete this Adoption?
                    </DialogContent>
                    <DialogActions>
                        <MudButton Color="Color.Primary" Variant="Variant.Outlined" OnClick="@(() => _confirmDeleteDialogVisible = false)">Cancel</MudButton>
                        <MudButton Color="Color.Error" Variant="Variant.Outlined" OnClick="@(() => ConnfirmDelete(_adoptionToDelete))">Delete</MudButton>
                    </DialogActions>
                </MudDialog>
}


@code {
    private List<AdoptionDetailsForAdminDto> Adoptions { get; set; } = new List<AdoptionDetailsForAdminDto>();
    private string? error { get; set; } = null;
    bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Adoptions = await _adoptionService.GetAllAdoptions();
            loading = false;
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }


    //searching
    private string searchInput = "";
    private bool FilterFunc1(AdoptionDetailsForAdminDto element) => FilterFunc(element, searchInput);

    private bool FilterFunc(AdoptionDetailsForAdminDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if ($"{element.AdopteeName} {element.AdopteeType} {element.AdopterFullName} {element.AdopterEmail} {element.State} {element.NoteForAdministration} {element.NoteForAdopter}".Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    //deleting    
    private bool _confirmDeleteDialogVisible = false;
    private AdoptionDetailsForAdminDto? _adoptionToDelete;
    private void ShowConfirmDeleteDialog(AdoptionDetailsForAdminDto? a)
    {
        _adoptionToDelete = a;
        _confirmDeleteDialogVisible = true;
    }

    private async Task ConnfirmDelete(AdoptionDetailsForAdminDto? a)
    {
        try{
            AnimalDto updateAnimal = await _animalService.GetAnimalById(a.AdopteeId);
            updateAnimal.Date_adopted = null;
            updateAnimal.Reservation_Date = null;
            await _animalService.UpdateAnimal(updateAnimal);
            await _adoptionService.DeleteAdoption(a.Id);
              Adoptions.Remove(a);
         _confirmDeleteDialogVisible = false;
        } catch (Exception ex){
            error = ex.Message;
        }
    }
}