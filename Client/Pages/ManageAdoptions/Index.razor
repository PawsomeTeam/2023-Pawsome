@page "/manage/adoptions"
@inject IAuthService authService
@inject IAdoptionService _adoptionService

@if(Adoptions == null && error == null)
{
       <MudText Typo="Typo.h6" Class="mb-8" Align="Align.Center">
            <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
             Loading ...
        </MudText>
}
else if(error != null)
{
    <MudAlert Severity="Severity.Error" Class="mb-8" Align="Align.Center">
        <MudText Typo="Typo.h6" Class="mb-8" Align="Align.Center">
            @error
        </MudText>
    </MudAlert>
}
else
{

    <MudToolBar class="pr-0 pl-0">
        <MudText Typo="Typo.h6">All Adoptions</MudText>
        <MudSpacer />
        <div class="mx-5">
            @* <MudTextField @bind-Value="searchInput" Placeholder="Search"  Class="mt-0" 
        Adornment="Adornment.Start" AdornmentColor="Color.Primary"
        AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"
        Variant="Variant.Outlined" Width="100px" Margin="Margin.Dense" ></MudTextField> *@
            @* <MudButton Color="Color.Primary" Variant="Variant.Outlined" Class="mr-2" OnClick="@(() => NavigationManager.NavigateTo("/manage/products/create"))">Create</MudButton> *@
        </div>
        
        @* <MudButton Link="/register" Color="Color.Primary" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Person">Register New</MudButton> *@
    </MudToolBar>

<MudTable Items="@Adoptions" Hover="true" SortLabel="Sort By" Filter="new Func<AdoptionDetailsForAdminDto,bool>(FilterFunc1)" Loading="@loading" LoadingProgressColor="Color.Primary">
    <HeaderContent>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<AdoptionDetailsForAdminDto, object>(x=>x.Id)">Id</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<AdoptionDetailsForAdminDto, object>(x=>x.AdopteeName)">AdopteeName</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<AdoptionDetailsForAdminDto, object>(x=>x.AdopterFisrtName)">AdopterFisrtName</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<AdoptionDetailsForAdminDto, object>(x=>x.CreatedAt)">Submission Date</MudTableSortLabel></MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="AdopteeName">@context.AdopteeName</MudTd>
        <MudTd DataLabel="AdopterFisrtName">
            <MudText Typo="Typo.subtitle2">@context.AdopterFisrtName @context.AdopterLastName</MudText>
            <MudText Typo="Typo.subtitle2">@context.AdopterEmail</MudText>
        </MudTd>
        <MudTd DataLabel="Submission Date">@context.CreatedAt</MudTd>
        <MudTd DataLabel="Price">
            @{
                    //TODO: make these into a Dialog instad of URLs
                var editUrl = $"/manage/adoptions/update/{context.Id}";
                var deleteUrl = $"manage/adoptions/delete/{context.Id}";
            }
            <MudTooltip Text="Triger Dialog instead of redirect" Arrow="true" Placement="Placement.Left">
                <MudIconButton Disabled="true" Link="@editUrl" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined"   Size="Size.Small"  />
                <MudIconButton Disabled="true" Link="@deleteUrl" Color="Color.Error" Icon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined"  Size="Size.Small"  />
            </MudTooltip>
            
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[]{10, 50, 100}" />
    </PagerContent>
</MudTable>
}


@code {
    private IEnumerable<AdoptionDetailsForAdminDto> Adoptions { get; set; } = new List<AdoptionDetailsForAdminDto>();
    private string? error { get; set; } = null;
    bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Adoptions = await _adoptionService.GetAllAdoptions();
            loading = false;
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }


    //searching
    private string searchInput = "";
    private bool FilterFunc1(AdoptionDetailsForAdminDto element) => FilterFunc(element, searchInput);

    private bool FilterFunc(AdoptionDetailsForAdminDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if ($"{element.AdopteeName}".Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}