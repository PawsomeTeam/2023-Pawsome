@page "/manage/orders"
@inject IOrderService orderService

<MudText Typo="Typo.h3" Class="mb-8" Align="Align.Center">Order History</MudText>

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
    <MudToolBar class="pr-0 pl-0">
        <MudText Typo="Typo.h6"></MudText>
        <MudSpacer/>
        <div class="mx-5">
            <MudTextField @bind-Value="searchInput" Placeholder="Search" Class="mt-0"
                          Adornment="Adornment.Start" AdornmentColor="Color.Primary"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"
                          Variant="Variant.Outlined" Width="100px" Margin="Margin.Dense">
            </MudTextField>
            @* <MudButton Color="Color.Primary" Variant="Variant.Outlined" Class="mr-2" OnClick="@(() => NavigationManager.NavigateTo("/manage/products/create"))">Create</MudButton> *@
        </div>

        <MudButton Link="/manage/products/new" Color="Color.Primary" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Add">Add New</MudButton>
    </MudToolBar>
    <MudTable Items="@Orders" Context="orders" Hover="true" SortLabel="Sort By" Filter="new Func<OrderDto, bool>(FilterFunc1)" LoadingProgressColor="Color.Primary">
        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<OrderDto, object>(x => x.Id)">Id</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<OrderDto, object>(x => x.UserEmail)">User Email</MudTableSortLabel>
            </MudTh>
            <MudTh>
                Products
            </MudTh>
            <MudTh>Price</MudTh>
            <MudTh>QTY</MudTh>
            <MudTh>Total</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Order Id">@orders.Id</MudTd>
            <MudTd DataLabel="Username">@orders.UserEmail</MudTd>
            <MudTd DataLabel="Order Items">
                @foreach (var item in orders.OrderItems)
                {
                    string DisplayUrl = $"/shop/products/{item.ProductId}";
                    <MudLink Href="@DisplayUrl">
                        <MudText Typo="Typo.subtitle2">@item.ProductName</MudText>
                    </MudLink>
                }
            </MudTd>
            <MudTd DataLabel="Items Price">
                @foreach (var item in orders.OrderItems)
                {
                    <MudText Typo="Typo.subtitle2">@item.Price.ToString("C")</MudText>
                }
            </MudTd>
            <MudTd DataLabel="Items Qty">
                @foreach (var item in orders.OrderItems)
                {
                    <MudText Typo="Typo.subtitle2">@item.Qty</MudText>
                }
            </MudTd>
            <MudTd DataLabel="Order Total">
                @{
                    Decimal total = 0;
                    foreach (var item in orders.OrderItems)
                    {
                        total += item.Price * item.Qty;
                    }
                    <MudText Typo="Typo.subtitle2">@total.ToString("C")</MudText>
                }
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 10, 50, 100 }"/>
        </PagerContent>
    </MudTable>
</MudContainer>


@code
{
    int maxLen = 30; //max product description length
    private List<OrderDto> Orders { get; set; } = new List<OrderDto>();

    string? error { get; set; }

    protected override async Task OnInitializedAsync()
    {
        error = null;
        try
        {
            Orders = await orderService.AllItems();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    //searching
    private string searchInput = "";

    private bool FilterFunc1(OrderDto element) => FilterFunc(element, searchInput);

    private bool FilterFunc(OrderDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        foreach (var orderItem in element.OrderItems)
        {
            if ($"{element.UserEmail} {orderItem.ProductName} {orderItem.Price}".Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
        }
        return false;
    }
}