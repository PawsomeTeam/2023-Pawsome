@page "/manage/products/new"
@using System.Net.Http.Headers
@using System.Text.RegularExpressions
@inherits CreateProductBase

<MudText Align="Align.Center" Typo="Typo.h3">Create Product</MudText>


<MudGrid Class="mb-16">
    <MudItem xs="12" md="6" lg="4">
        @if (Product.ImageURL != null)
        {
            <MudImage Fluid="true" Src="@Product.ImageURL" Alt="@Product.Name" Class="rounded-xs"/>
            <MudIconButton OnClick="() => HandleDeleteImage(Product.ImageURL)" Color="Color.Error" Icon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Size="Size.Small"/>
        }
    </MudItem>
    <MudItem xs="12" md="6" lg="8">
        <MudTextField @bind-Value="@Product.Name" Label="Name" Variant="Variant.Outlined"/>
        <MudTextField @bind-Value="@Product.Description" Label="Description" Variant="Variant.Outlined"/>
        <MudTextField @bind-Value="@Product.Price" Label="Price" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney"/>
        <MudTextField @bind-Value="@Product.Qty" Label="Stock" Variant="Variant.Outlined"/>
        <InputFile id="imageInput" OnChange="HandleSelectedImage" hidden accept=".jpg, .jpeg, .png"/>
        <MudButton HtmlTag="label"
                   Variant="Variant.Filled"
                   Color="Color.Success"
                   StartIcon="@Icons.Filled.Image"
                   Label="Load picture"
                   for="imageInput">
            Upload Files
        </MudButton>
        <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Add" Color="Color.Primary"
                   @onclick="() => (Create_Product_Click(Product))">
            Add Product
        </MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error"
                   Class="my-3 mx-auto"
                   OnClick="HandleDeleteAllImages">
            Cancel
        </MudButton>
    </MudItem>
</MudGrid>

@code
{
    [Inject]
    public HttpClient HttpClient { get; set; }

    public string ImgUrl { get; set; }

    private async Task HandleSelectedImage(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;
        if (imageFile == null)
            return;

        var resizedFile = await imageFile.RequestImageFileAsync("image/png", 300, 500);

        using (var ms = resizedFile.OpenReadStream(resizedFile.Size))
        {
            var content = new MultipartFormDataContent();
            content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
            content.Add(new StreamContent(ms, Convert.ToInt32(resizedFile.Size)), "image", imageFile.Name);
            var response = await HttpClient.PostAsync("api/Product/UploadImage", content);

            if (Product.ImageURL != null)
            {
                Console.WriteLine("Image File is changed");
                await HandleDeleteImage(Product.ImageURL);
            }
            Product.ImageURL = await response.Content.ReadAsStringAsync();
        }
    }

    private async Task HandleDeleteImage(string url)
    {
        var imageURL = url;
        var filename = fileName(imageURL);
        var response = await HttpClient.DeleteAsync($"api/Product/{filename}");
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Image File is deleted");
            Product.ImageURL = null;
        }
    }

    private async Task HandleDeleteAllImages()
    {
        if (Product.ImageURL != null)
        {
            var imageURL = Product.ImageURL;
            var filename = fileName(imageURL);
            var response = await HttpClient.DeleteAsync($"api/Product/{filename}");
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Image File is deleted with Cancel");
            }
        }
        NavigationManager.NavigateTo("manage/products");
    }

    private string fileName(string url)
    {
        Match match = Regex.Match(url, @"([^/]+\.[^/]+)$");
        return match.Groups[1].Value;
    }
}